{"version":3,"sources":["component/Calculator/Calculator.js","component/Display/Display.js","component/Button/Button.js","component/ButtonsPad/ButtonsPad.js","index.js"],"names":["checkIsOperator","str","test","endsWithOperator","endsWithMinus","Calculator","useState","currentDisplay","setCurrentDisplay","prevDisplay","setPrevDisplay","accumulateDisplay","setAccumulateDisplay","isCalculated","setIsCalculated","handleOperatorClick","value","newValue","result","expression","slice","replace","answer","Math","round","eval","reset","handleClick","target","innerText","length","includes","className","Display","id","Button","style","gridArea","onClick","buttons","buttonsForNumpad","ButtonsPad","map","num","index","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.629283b0.chunk.js","sourcesContent":["import { useState } from 'react';\nimport ButtonsPad from '../ButtonsPad/ButtonsPad';\nimport Display from '../Display/Display';\nimport './Calculator.css';\n\nconst checkIsOperator = (str) => /[x/\\-+]/g.test(str);\nconst endsWithOperator = (str) => /.*[x\\-+/]$/g.test(str);\nconst endsWithMinus = (str) => /.*-$/g.test(str);\n\nconst Calculator = () => {\n  const [currentDisplay, setCurrentDisplay] = useState('0');\n  const [prevDisplay, setPrevDisplay] = useState('0');\n  const [accumulateDisplay, setAccumulateDisplay] = useState('');\n  const [isCalculated, setIsCalculated] = useState(false);\n\n  const handleOperatorClick = (value) => {\n    if (isCalculated) setAccumulateDisplay(prevDisplay + value);\n    else if (!endsWithOperator(accumulateDisplay)) {\n      setPrevDisplay(accumulateDisplay);\n      setAccumulateDisplay(accumulateDisplay + value);\n    } else if (!endsWithMinus(accumulateDisplay)) {\n      const newValue = endsWithMinus(accumulateDisplay + value)\n        ? accumulateDisplay\n        : prevDisplay;\n      setAccumulateDisplay(newValue + value);\n    } else if (value !== '-') setAccumulateDisplay(prevDisplay + value);\n  };\n\n  const result = () => {\n    if (isCalculated) return false\n    let expression = endsWithOperator(accumulateDisplay)\n      ? accumulateDisplay.slice(0, -1)\n      : accumulateDisplay;\n\n    expression = expression.replace(/x/g, '*');\n    // eslint-disable-next-line no-eval\n    const answer = Math.round(10000 * eval(expression)) / 10000 + '';\n\n    setCurrentDisplay(answer);\n    setAccumulateDisplay(`${accumulateDisplay} = ${answer}`);\n    setPrevDisplay(answer);\n    setIsCalculated(true);\n  };\n\n  const reset = () => {\n    setCurrentDisplay('0');\n    setPrevDisplay('');\n    setAccumulateDisplay('');\n    setIsCalculated(false);\n  };\n  \n  const handleClick = ({ target }) => {\n    const value = target.innerText;\n\n    if (value === '=') return result();\n    \n    setIsCalculated(false);\n\n    if (value === 'AC') return reset();\n    if (currentDisplay.length > 11) return setCurrentDisplay('Too much digitals')\n    \n    if (value === '.' && currentDisplay.includes('.')) return false;\n\n    if (currentDisplay === '0' || checkIsOperator(value)) setCurrentDisplay(value);\n    else setCurrentDisplay(currentDisplay + value);\n\n    if (!checkIsOperator(value)) {\n      if (accumulateDisplay === '' || accumulateDisplay === '0') return setAccumulateDisplay(value);\n      return setAccumulateDisplay(accumulateDisplay + value);\n    }\n\n    return handleOperatorClick(value);\n  };\n\n  return (\n    <div className='Calculator'>\n      <Display\n        accumulateDisplay={accumulateDisplay}\n        currentDisplay={currentDisplay}\n      />\n      <ButtonsPad handleClick={handleClick} />\n    </div>\n  );\n};\n\nexport default Calculator;\n","import './Display.css';\n\nconst Display = ({ accumulateDisplay, currentDisplay }) => {\n  return (\n    <div className='display'>\n      <div className='display__accumulator'>{accumulateDisplay}</div>\n      <div id='display' className='display__current'>{currentDisplay}</div>\n    </div>\n  );\n};\n\nexport default Display;\n","import './Button.css';\n\nconst Button = ({ innerText, id, handleClick }) => {\n  return (\n    <div\n      className='button num-button'\n      id={id}\n      style={{ gridArea: id }}\n      onClick={handleClick}\n    >\n      {innerText}\n    </div>\n  );\n};\n\nexport default Button;\n","import Button from '../Button/Button';\nimport './ButtonsPad.css';\n\nconst buttons = {\n  buttonsForNumpad: [\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n    'six',\n    'seven',\n    'eight',\n    'nine',\n  ],\n};\n\nconst ButtonsPad = ({\n  handleClick,\n}) => {\n  return (\n    <>\n      <Button id='clear' innerText='AC' handleClick={handleClick} />\n      <Button id='divide' innerText='/' handleClick={handleClick} />\n      <Button id='multiply' innerText='x' handleClick={handleClick} />\n      <Button id='subtract' innerText='-' handleClick={handleClick} />\n      <Button id='add' innerText='+' handleClick={handleClick} />\n      <Button id='equals' innerText='=' handleClick={handleClick} />\n\n      <div className='numpad'>\n        <Button id='zero' innerText={0} handleClick={handleClick} />\n        <Button id='decimal' innerText='.' handleClick={handleClick} />\n        {buttons.buttonsForNumpad.map((num, index) => (\n          <Button\n            key={num}\n            id={num}\n            innerText={index + 1}\n            handleClick={handleClick}\n          />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default ButtonsPad;\n","import ReactDOM from 'react-dom';\nimport Calculator from './component/Calculator/Calculator';\nimport './style.css';\n\nReactDOM.render(<Calculator />, document.querySelector('#root'));\n"],"sourceRoot":""}